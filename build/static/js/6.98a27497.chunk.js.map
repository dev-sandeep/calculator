{"version":3,"sources":["utility/utility.js","components/BaseForm.js","views/pages/CPC.js"],"names":["getFormSetting","cpc","data","title","subtitle","forms","id","label","explain","type","value","result","a","b","c","d","result_unit","ae","inv","investment","years","rate","Math","pow","toFixed","BaseForm","props","useState","setData","setResult","useEffect","tooltip","setTooltipData","currencyFormator","num","toString","replace","className","aria-expanded","map","inst","index","key","placement","isOpen","target","toggle","onChange","e","val","findIndex","newObj","slice","arr","push","parseFloat","finalresult","onChangeText","required","configData","marketSize","init"],"mappings":"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","file":"static/js/6.98a27497.chunk.js","sourcesContent":["function getFormSetting() {\n    return {\n        cpc: {\n            data: {\n                title: 'Customer Acquisiotion Cost',\n                subtitle: 'A small calculator to calculate the amount you need to spend to acquire new customers',\n                forms: [{\n                        id: 'market_size1',\n                        label: 'Total Users',\n                        explain: 'Total number users who would see your ads per day',\n                        type: 'input',\n                        value: 0\n                    },\n                    {\n                        id: 'market_size2',\n                        label: 'Impressions per user',\n                        explain: 'Number of times an user could see your ad',\n                        type: 'input',\n                        value: 0\n                    },\n                    {\n                        id: 'market_size3',\n                        label: 'Click percentage',\n                        explain: 'What percentage of users could click on the ad',\n                        type: 'input',\n                        value: 0\n                    },\n                    {\n                        id: 'market_size4',\n                        label: 'Average Customer Acquisition cost',\n                        explain: 'Average amount you have to invest to acquire a customer',\n                        type: 'input',\n                        value: 0\n                    },\n                ],\n                result: (a, b, c, d) => {\n                    return (a || 1) * (b || 1) * ((c || 100) / 100 || 1) * (d || 1);\n                },\n                result_unit: 'Total amount you have to investment'\n            }\n        },\n        ae: {\n            data: {\n                title: 'Ads Earning',\n                subtitle: 'How much you could earn from Ad sense',\n                forms: [{\n                        id: 'inp1',\n                        label: 'Active users per day',\n                        explain: 'Total number of users who could see your ad in a day',\n                        type: 'input',\n                        value: 0\n                    },\n                    {\n                        id: 'inp2',\n                        label: 'Impressions per day',\n                        explain: 'Total number of times users sees an advertisement in a day',\n                        type: 'input',\n                        value: 0\n                    },\n                    {\n                        id: 'inp3',\n                        label: 'Click percentage',\n                        explain: 'percentage of user who would click on an advertisement when they see it',\n                        type: 'input',\n                        value: 0\n                    },\n                    {\n                        id: 'inp4',\n                        label: 'Price per click',\n                        explain: 'Amount you would get when an user clicks an advertisement',\n                        type: 'input',\n                        value: 0\n                    }\n                ],\n                result: (a, b, c, d) => {\n                    return (a || 1) * (b || 1) * ((c || 100) / 100 || 1) * (d || 1);\n                },\n                result_unit: 'Total amount you would earn in a day'\n            }\n        },\n        inv: {\n            data: {\n                title: 'Returns calculator',\n                subtitle: 'Calculate the returns you would get against your investment',\n                forms: [{\n                        id: 'inp1',\n                        label: 'Investment',\n                        explain: 'Amount which you would like to invest?',\n                        type: 'input',\n                        value: 0\n                    },\n                    {\n                        id: 'inp2',\n                        label: 'Time (in years)',\n                        explain: 'The time for which you want your money to be invested',\n                        type: 'input',\n                        value: 0\n                    },\n                    {\n                        id: 'inp3',\n                        label: 'Interest Percentage',\n                        explain: 'Return percentage which would be applied(per year) to your investment',\n                        type: 'input',\n                        value: 0\n                    }\n                ],\n                result: (investment, years, rate) => {\n                    return ((investment || 1) * (Math.pow(1 + (rate || 0)/100, (years || 0)))).toFixed(2);\n                    // return (a || 1) * (b || 1) * ((c || 100) / 100 || 1) * (d || 1);\n                },\n                result_unit: 'Total amount you would earn after the specified years'\n            }\n        }\n    };\n}\n\nexport {\n    getFormSetting\n}","import React, { useEffect, useState } from 'react'\nimport { Tooltip } from 'reactstrap';\n// import Form from 'react-bootstrap/Form'\n\nfunction BaseForm(props) {\n    const [data, setData] = useState({\n        forms: []\n    });\n    const [result, setResult] = useState(0);\n\n    const init = () => {\n        setData(props.data);\n    }\n    useEffect(() => {\n        init();\n    }, props.data);\n\n\n    const [tooltip, setTooltipData] = useState(false);\n    // const [tooltipOpen, setTooltipOpen] = useState(false);\n    const toggle = (id) => {\n        setTooltipData({...data, [id]:tooltip[id]?false:true});\n    };\n\n\n    const onChangeText = (key, val) => {\n        let index = data.forms.findIndex((inst) => key == inst.label);\n        let newObj = data.forms[index];\n        newObj.value = val;\n        let temp = [...data.forms.slice(0, index), newObj, ...data.forms.slice(index + 1)];\n\n        //calculate result\n        let arr = [];\n        data.forms.map((inst) => {\n            arr.push(parseFloat(inst.value));\n        })\n        let finalresult = data.result(...arr);\n        setResult(currencyFormator(finalresult));\n    }\n\n    const currencyFormator = (num) => {\n        return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n\n    /* all of the maon content goes here  */\n    return (\n        <div className=\"col-lg-8\">\n        <div className=\"card\">\n            <div className=\"card-header\">\n                <p className=\"card-title font-2\">{data? data.title:''}</p>\n            </div>\n            <div className=\"card-content collapse show\" aria-expanded=\"true\">\n                <div className=\"card-body\">\n                    <p className=\"card-text\">\n                        {data? data.subtitle:''}\n                    </p>\n                    \n                    <div className=\"form-section\">\n                        <div className=\"forms\">\n                            <div>\n                                {(data && data.forms) ? (\n                                    data.forms.map((inst, index) => (\n                                        <div key={inst.label+index} className=\"col-lg-12 col-md-12 col-sm-12 p-left-0\">\n                                            <label>\n                                                <Tooltip placement=\"right\" isOpen={tooltip['id-'+index]} target={\"id-\"+index} toggle={()=>{toggle('id-'+index)}}>\n                                                    {inst.explain}\n                                                </Tooltip>\n                                                <span id={\"id-\"+index}>\n                                                    {inst.label}\n                                                </span>\n                                            </label>\n                                            <input type=\"number\" onChange={(e) => { onChangeText(inst.label, e.target.value) }} className=\"form-control\"\n                                            required=\"\" />\n                                            <div className=\"valid-tooltip\">\n                                            Looks good!\n                                            </div>\n                                        </div>\n                                        \n                                    ))\n                                ) : (<></>)}\n\n                                <div className=\"text-right result\">\n                                    <p>{result}</p>\n                                </div>\n                                <div className=\"result-text\">\n                                    <small>{data?data.result_unit:''}</small>\n                                </div>\n                               \n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"card-footer\">\n                <span className=\"text-muted\">Developed by, Sandeep Gantait</span>\n            </div>\n        </div>\n    </div>\n        \n    );\n}\n\nexport default BaseForm;","import React, {useState, useEffect} from \"react\"\nimport { getFormSetting } from '../../utility/utility'\nimport BaseForm from '../../components/BaseForm'\n\nexport default function(){\n\nconst [data, setData] = useState({});\nconst init = () => {\n    let configData = getFormSetting();\n    setData({ ...data, marketSize: configData.cpc.data });\n}\nuseEffect(() => {\n    init();\n}, []);\n\n  return (<BaseForm data={data.marketSize} />);}"],"sourceRoot":""}